# -*- coding: utf-8 -*-
"""221_Expt_4.ipnyb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19-RpGfue52gHBIMntvqsj8p4gmulJ2I8

**NAME**: Kanawade Nandini Rajendra

---


**ROLL NO.**: UEC2021221

***PERFORM CLASSIFICATION USING MNIST***
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np

"""**PREPROCESSING**

1.IMPORT DATASET AND SPLT INTO TRAINNG AND TESTING
"""

(trainX,trainY),(testX,testY)=tf.keras.datasets.mnist.load_data()

trainX.shape #NUMBER OF IMAGES=60000,SIZE OF IMAGE=28*28(0 TO 59999)

testX.shape#NUMBER OF IMAGES=10000,SIZE OF IMAGE=28*28(0 TO 9999)

"""2.Checking training and testing data"""

plt.imshow(trainX[2])

trainY[2]

plt.imshow(testX[2])

testY[2]

"""3. CONVERT TO CATEGORICAL DATA"""

trainY= tf.keras.utils.to_categorical(trainY,num_classes=10)

testY= tf.keras.utils.to_categorical(testY,num_classes=10)

"""4.USE ONE-HOT ENCODING FOR CONVERTING INTO 10 CLASSES"""

trainY[6]

testY[6]

"""**MODEL BUILDING**

5.DEFINE SEQUENTIAL KERAS MODEL
"""

model=tf.keras.models.Sequential()

"""6.RESHAPE INPUT IMAGE INTO COLUMN MATRIX(28X28)"""

model.add(tf.keras.layers.Reshape((784,),input_shape=(28,28)))

"""7.PERFORM NORMALIZATION"""

model.add(tf.keras.layers.BatchNormalization())
#scale (gamma), offset (beta), moving mean, and moving variance (mean and variance non trainable)
#784 x 4 = 3136

"""8.ADD LAYERS WITH ACTIVATION FUNCTION RELU"""

#3 layers added
model.add(tf.keras.layers.Dense(100,activation='relu'))
#784 x 100 (weights) + 100 bias = 78500
model.add(tf.keras.layers.Dense(100,activation='relu'))
#100 x 100 + 100 = 10100

"""9.LAST YEAR AS CLASSSIFIER WITH AF AS SIGMOIDAL OR SOFTMAX"""

model.add(tf.keras.layers.Dense(10,activation='softmax'))
#100 x 10 + 10 = 1010

"""10.PERFORM MODEL SUMMARY"""

model.summary()

"""11.COMPILE MODEL"""

model.compile(optimizer='sgd',loss='categorical_crossentropy',metrics=['accuracy'])

"""12.CHECK FOR EPOCHS"""

model.fit(trainX,trainY,validation_data=(testX,testY),epochs=3)

"""13.TEST/PREDICT DATA"""

model.predict(testX[:2]) #OUTPUT OF FIRST TWO IMAGES

testY[:2] #ground truth of first two images

plt.imshow(testX[0])

