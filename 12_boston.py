# -*- coding: utf-8 -*-
"""Boston.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bMGyFjEjoo2xLfoYbeXkn4ptpmIGulJb
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

model=tf.keras.models.Sequential();
(train_X, train_Y), (test_X, test_Y)=tf.keras.datasets.boston_housing.load_data();

Y_actual=train_Y;
train_X.shape
train_Y.shape
train_X.dtype

print("Shape of training input:", train_X.shape)
print("Shape of training label:", train_Y.shape)

from sklearn.preprocessing import Normalizer
transform=Normalizer();
train_X=transform.fit_transform(train_X)

model=tf.keras.models.Sequential();

model.add(tf.keras.layers.Dense (1,input_shape=(13,)))

model.compile(optimizer='sgd', loss='mean_squared_error')

history=model.fit(train_X, train_Y, epochs=100)

plt.plot(history.history['loss'], label='Training Loss')
#plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

model.summary()

model.get_weights()

Y_predict=model.predict(test_X)

for i in range(len(test_X)):
  print("predicated price of a home with {} rooms : ${ }",int (Y_predict[i]*10)/10)

for i in range(len(test_X)):
    num_rooms = test_X[i][0]  # Assuming the number of rooms is the first feature in test_X
    print("Predicted price of a home with {} rooms: ${:.2f}".format(num_rooms, predicted_price[0][0]))

for i in range(10):
    predicted_price = model.predict(test_X[i].reshape(1, -1))  # Predict the price for the current test sample
    num_rooms = test_X[i][0]  # Assuming the number of rooms is the first feature in test_X
    print("Predicted price of a home with {} rooms: ${:.2f}".format(num_rooms, predicted_price[0][0]))